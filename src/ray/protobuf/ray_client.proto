// Copyright 2020 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ray.rpc;

enum Type { DEFAULT = 0; }

message Arg {
  enum Locality {
    INTERNED = 0;
    REFERENCE = 1;
  }
  Locality local = 1;
  bytes reference_id = 2;
  bytes data = 3;
  Type type = 4;
}

message ClientTask {
  enum RemoteExecType {
    FUNCTION = 0;
    ACTOR = 1;
    METHOD = 2;
    STATIC_METHOD = 3;
  }
  RemoteExecType type = 1;
  string name = 2;
  bytes payload_id = 3;
  repeated Arg args = 4;
}

message ClientTaskTicket {
  bytes return_id = 1;
}

message PutRequest {
  bytes data = 1;
}

message PutResponse {
  bytes id = 1;
}

message GetRequest {
  bytes id = 1;
}

message GetResponse {
  bool valid = 1;
  bytes data = 2;
}

message WaitRequest {
  repeated bytes object_refs = 1;
  int64 num_returns = 2;
  double timeout = 3;
}

message WaitResponse {
  bool valid = 1;
  repeated bytes ready_object_ids = 2;
  repeated bytes remaining_object_ids = 3;
}


enum ClusterInfoType {
  CURRENT_NODE_ID = 0;
  JOBS = 1;
  NODES = 2;
  WORKERS = 3;
  NODE_IDS = 4;
  ACTORS = 5;
  OBJECTS = 6;
  CLUSTER_RESOURCES = 7;
  AVAILABLE_RESOURCES = 8;
}

message ClusterInfoRequest {
  ClusterInfoType type = 1;

  // Optional, used for ACTORS and OBJECTS info.
  // If empty, returns the entire table for those entities.
  repeated bytes client_ids = 2;
}

message ClusterInfoResponse {
  ClusterInfoType type = 1;
  // One of the following will be filled in, depending on type
  // It's not a proto3 oneof because maps aren't allowed in oneofs.
  string id = 2;
  string debug_table_json = 3;
  map<string, int64> resource_table = 4;
}

message TerminateRequest {
  message ActorTerminate {
    bytes id = 1;
    bool no_restart = 2;
  }
  message TaskObjectTerminate {
    bytes id = 1;
    bool force = 2;
    bool recursive = 3;
  }

  oneof terminate_type {
    ActorTerminate actor = 1;
    TaskObjectTerminate task_object = 2;
  }
}

message TerminateResponse {
  bool ok = 1;
}

service RayletDriver {
  rpc GetObject(GetRequest) returns (GetResponse) {
  }
  rpc PutObject(PutRequest) returns (PutResponse) {
  }
  rpc WaitObject(WaitRequest) returns (WaitResponse) {
  }
  rpc Schedule(ClientTask) returns (ClientTaskTicket) {
  }
  rpc Terminate(TerminateRequest) returns (TerminateResponse) {
  }
  rpc ClusterInfo(ClusterInfoRequest) returns (ClusterInfoResponse) {
  }
}
